<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>加密原理及应用</title>
    <link href="/2022/02/12/crypto/"/>
    <url>/2022/02/12/crypto/</url>
    
    <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p><img src="/2022/02/12/crypto/image-20211206154757668.png" alt="image-20211206154757668"></p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p><img src="/2022/02/12/crypto/image-20211206155824140.png" alt="image-20211206155824140"></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="加密-1"><a href="#加密-1" class="headerlink" title="加密"></a>加密</h3><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><blockquote><blockquote><p>DES、3DES-加密标准、3重加密标准</p><p>AES-高级加密标准，分组加密 在4x4的字节矩阵上运作</p></blockquote><p><img src="/2022/02/12/crypto/image-20211221141602131.png" alt="image-20211221141602131"></p><ul><li><p>密钥加法层</p><p>进行异或运算</p><p><img src="https://pic3.zhimg.com/80/v2-cab03da551aafad821676824c1bc6ebe_1440w.jpg" alt="img"></p></li><li><p>字节代换层 <strong>混淆</strong></p><p>S盒映射：字节到字节的映射</p><p><strong>每个字节的高四位作为第一个下标，低四位作为第二个下标</strong></p><p><img src="https://pic1.zhimg.com/80/v2-e160744c78b680b008c165cb78841858_1440w.jpg" alt="img"></p></li><li><p>行位移层 <strong>扩散</strong></p><p>对矩阵的每一行进行左移：0123</p><p><img src="https://pic2.zhimg.com/80/v2-581b444c6583aff31afe66b0391d73c1_1440w.jpg" alt="img"></p></li><li><p>列混淆层 <strong>扩散</strong></p><p>左乘一个矩阵</p><p><img src="https://pic2.zhimg.com/80/v2-8d1c58108b9d719a8674d7703ead7991_1440w.jpg" alt="img"></p></li></ul></blockquote><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><blockquote><blockquote><p>RSA—公钥加密算法 安全性：大整数因式分解的困难性</p><p>ECC-椭圆曲线加密算法 安全性：解决椭圆曲线离散对数问题的困难性</p></blockquote><ul><li>私钥签名、公钥验证</li><li>公钥加密、私钥解密</li><li>公钥、私钥的产生（例）</li></ul><blockquote><p>1、素数 p = 2 和 q = 7 ，计算乘积为 N = pq = 14 （小于14与14不互质的数：2，4，6，7，8，10，12，密钥长度2）</p><p>2、根据欧拉函数，r = <img src="/2022/02/12/crypto/image-20211216150404408.png" alt="image-20211216150404408"> = (p-1)*(q-1) =(2-1)(7-1） = 6</p><p>3、选择整数 e = 5，e 和 r 互质，求得 e 关于 r 的模拟元 d <img src="/2022/02/12/crypto/image-20211216153455586.png" alt="image-20211216153455586"></p><p>4、即ed-1=xr，d = 11</p><p>5、公钥为(N, e)，私钥为(N, d)即公钥(14, 5)，私钥(14, 11)</p></blockquote><ul><li>加密</li></ul><blockquote><p>1、明文为n = 10（需要小于N）</p><p>2、密文<img src="/2022/02/12/crypto/image-20211216165421189.png" alt="image-20211216165421189">，即c=12，<img src="/2022/02/12/crypto/image-20211216165833740.png" alt="image-20211216165833740"></p></blockquote><ul><li>解密</li></ul><blockquote><p>1、密文c = 12</p><p>2、明文<img src="/2022/02/12/crypto/image-20211216165953118.png" alt="image-20211216165953118">，即n=10,<img src="/2022/02/12/crypto/image-20211216170344701.png" alt="image-20211216170344701"></p></blockquote><ul><li>安全性</li></ul><blockquote><p>1、由公钥、私钥生成第3/4步可知，要求d，需要知道e和r</p><p>2、由公钥、私钥生成第2步可知，要求r，需要知道p和q</p><p>3、由公钥、私钥生成第2步可知，要求p和q，需要知道N，公钥由e和N组成，所以要破解私钥，需要对N因式分解</p></blockquote><ul><li>结论</li></ul><blockquote><p>密钥长度越长，该算法越安全</p></blockquote><ul><li>已知的攻击方法</li></ul><blockquote><p>1、因数分解</p><ul><li>1999 RSA-155（512 bits）被成功分解 花费5个月时间 224 CPU hours</li><li>2009 RSA-768 (768 bits) 被成功分解</li></ul><p>2、时间攻击</p><ul><li>利用计算机加密使用的时间推算私钥的内容</li></ul></blockquote></blockquote><blockquote><p><strong>总结：明文与密文是一对一的关系</strong></p></blockquote><h3 id="Hash-1"><a href="#Hash-1" class="headerlink" title="Hash"></a>Hash</h3><blockquote><p>MD5、SHA</p><blockquote><p>正向快速</p></blockquote><p>给定明文，有限时间、有限资源可以计算出hash值</p><blockquote><p>逆向困难</p></blockquote><p>使用hash值在有限时间内很难推出明文</p><blockquote><p>输入敏感</p></blockquote><p>输入的文本略有不同，摘要需要很大不同</p><blockquote><p>Hash碰撞/散列碰撞</p></blockquote><p>找到hash值一致的两段明文的难度要足够大</p><p><strong>总结：输入文本与摘要结果是多对一的关系</strong></p></blockquote><h2 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h2><p><strong>如果被保护数据仅仅用作比较验证，在以后不需要还原成明文形式，则使用哈希</strong></p><p><strong>如果被保护数据在以后需要被还原成明文，则需要使用加密。</strong></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="1、HTTPS对数据的加密"><a href="#1、HTTPS对数据的加密" class="headerlink" title="1、HTTPS对数据的加密"></a>1、HTTPS对数据的加密</h3><blockquote><blockquote><p>对称加密 + 非对称加密</p></blockquote><p>具体方式：</p><p><img src="/2022/02/12/crypto/image-20211217154955299.png" alt="image-20211217154955299"></p></blockquote><h3 id="2、Git的无口令访问-SSH"><a href="#2、Git的无口令访问-SSH" class="headerlink" title="2、Git的无口令访问(SSH)"></a>2、Git的无口令访问(SSH)</h3><blockquote><blockquote><p>Hash(MD5) + 非对称加密</p></blockquote><p>具体方式：</p><p><img src="/2022/02/12/crypto/image-20211220173816031.png" alt="image-20211220173816031"></p></blockquote><h2 id="Web-API的使用"><a href="#Web-API的使用" class="headerlink" title="Web API的使用"></a>Web API的使用</h2><h3 id="Hash-2"><a href="#Hash-2" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取crypto对象</span><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">window</span>.crypto.subtle<br><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> TextEncoder()<br><br><span class="hljs-comment">// 摘要</span><br>crypto.digest(<br>  <span class="hljs-string">&#x27;SHA-256&#x27;</span>, <span class="hljs-comment">// 指定摘要算法</span><br>  encoder.encode(<span class="hljs-string">&#x27;Hello World&#x27;</span>) <span class="hljs-comment">// 入参ArrayBuffer</span><br>).then(<span class="hljs-function">(<span class="hljs-params">digest</span>) =&gt;</span> &#123;<br>   <br>  <span class="hljs-keyword">const</span> hashArray = <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(digest)) <span class="hljs-comment">// 结果ArrayBuffer转换为数组</span><br>  <span class="hljs-comment">// 结果转16进制字符串</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hash结果:&quot;</span>, hashArray.map(<span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> b.toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).join(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// 其中padStart用于将字符&#x27;0-F&#x27;转为&#x27;00-0F&#x27;，不然摘要长度将发生变化</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取crypto对象</span><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">window</span>.crypto.subtle<br><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> TextEncoder()<br>    <br><span class="hljs-comment">// RSA</span><br><span class="hljs-comment">// 生成一对公钥、私钥</span><br>crypto.generateKey(<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;RSASSA-PKCS1-v1_5&quot;</span>, <span class="hljs-comment">// 指定加密算法</span><br>    <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">4096</span>, <span class="hljs-comment">// 指定密钥长度，至少2048位</span><br>    <span class="hljs-attr">publicExponent</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]), <span class="hljs-comment">// 建议使用65537, [0x01, 0x00, 0x01]，含义：组成公钥的质数</span><br>    <span class="hljs-attr">hash</span>: <span class="hljs-string">&quot;SHA-256&quot;</span> <span class="hljs-comment">// 指定摘要函数名称</span><br>  &#125;,<br>  <span class="hljs-literal">true</span>,<br>  [<span class="hljs-string">&quot;sign&quot;</span>, <span class="hljs-string">&quot;verify&quot;</span>] <span class="hljs-comment">// key的用途，指定签名、验证</span><br>).then(<span class="hljs-keyword">async</span> (key) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> &#123; privateKey, publicKey &#125; = key <span class="hljs-comment">// 取公钥、私钥</span><br><br>  <span class="hljs-comment">// 签名</span><br>  <span class="hljs-keyword">const</span> signature = <span class="hljs-keyword">await</span> crypto.sign(<br>    <span class="hljs-string">&quot;RSASSA-PKCS1-v1_5&quot;</span>, <span class="hljs-comment">// 指定签名算法</span><br>    privateKey, <span class="hljs-comment">// 私钥</span><br>    encoder.encode(<span class="hljs-number">11</span>) <span class="hljs-comment">// 入参ArrayBuffer</span><br>  );<br>  <span class="hljs-keyword">const</span> hashArray = <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(signature)) <span class="hljs-comment">// 结果ArrayBuffer转换为数组</span><br>  <span class="hljs-comment">// 结果转16进制字符串</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;RSA签名:&quot;</span>, hashArray.map(<span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> b.toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).join(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// 其中padStart用于将字符&#x27;0-F&#x27;转为&#x27;00-0F&#x27;，不然摘要长度将发生变化</span><br><br>  <span class="hljs-comment">// 验证</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> crypto.verify(<br>    <span class="hljs-string">&quot;RSASSA-PKCS1-v1_5&quot;</span>, <span class="hljs-comment">// 指定签名算法</span><br>    publicKey, <span class="hljs-comment">// 公钥</span><br>    signature, <span class="hljs-comment">// 签名</span><br>    encoder.encode(<span class="hljs-number">11</span>) <span class="hljs-comment">// 入参ArrayBuffer</span><br>  )<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`RSA验证: <span class="hljs-subst">$&#123;result&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取crypto对象</span><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">window</span>.crypto.subtle<br><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> TextEncoder()<br><br><span class="hljs-comment">// AES</span><br><span class="hljs-comment">// 生成密钥</span><br>crypto.generateKey(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AES-GCM&#x27;</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">256</span>,<br>&#125;, <span class="hljs-literal">true</span>, [<span class="hljs-string">&#x27;encrypt&#x27;</span>, <span class="hljs-string">&#x27;decrypt&#x27;</span>]).then(<span class="hljs-keyword">async</span> (key) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> iv = <span class="hljs-built_in">window</span>.crypto.getRandomValues(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(<span class="hljs-number">12</span>)) <span class="hljs-comment">// 生成随机数</span><br><br>  <span class="hljs-comment">// 加密过程</span><br>  <span class="hljs-keyword">const</span> Ciphertext = <span class="hljs-keyword">await</span> crypto.encrypt(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AES-GCM&#x27;</span>, <span class="hljs-comment">// 算法名称</span><br>    iv, <span class="hljs-comment">// 随机数</span><br>  &#125;, key, encoder.encode(<span class="hljs-string">&#x27;Hello World&#x27;</span>))<br>  <span class="hljs-keyword">const</span> hashArray = <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(Ciphertext)) <span class="hljs-comment">// 结果ArrayBuffer转换为数组</span><br>  <span class="hljs-comment">// 结果转16进制字符串</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;AES密文:&quot;</span>, hashArray.map(<span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> b.toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).join(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// 其中padStart用于将字符&#x27;0-F&#x27;转为&#x27;00-0F&#x27;，不然摘要长度将发生变化</span><br><br>  <span class="hljs-comment">// 解密过程</span><br>  <span class="hljs-keyword">const</span> Plaintext = <span class="hljs-keyword">await</span> crypto.decrypt(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AES-GCM&#x27;</span>,<br>    iv,<br>  &#125;, key, Ciphertext)<br>  <span class="hljs-comment">// ArrayBuffer转换为字符串</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`AES明文: <span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>.fromCharCode.apply(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(Plaintext))&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="第三方库介绍"><a href="#第三方库介绍" class="headerlink" title="第三方库介绍"></a>第三方库介绍</h2><h3 id="jsrsasign"><a href="#jsrsasign" class="headerlink" title="jsrsasign"></a>jsrsasign</h3><blockquote><blockquote><p>优点：</p></blockquote><ul><li>加密方法齐全</li><li>Nodejs\web端都可以使用</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>生成密钥耗时长</li><li>加密、解密耗时长</li></ul></blockquote><h3 id="jsencrypt"><a href="#jsencrypt" class="headerlink" title="jsencrypt"></a>jsencrypt</h3><blockquote><blockquote><p>优点：</p></blockquote><ul><li>比jsrsasign加密速度快</li><li>Nodejs\web端都可以使用</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>Java验签时不兼容</li><li>无法生成rsa密钥</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http</title>
    <link href="/2022/02/12/http/"/>
    <url>/2022/02/12/http/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
